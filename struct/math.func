int math::sqrt(int x) {
  if (x == 0) { return 0; }

  int xx = x;
  int r = 1;
  if (xx >= 0x100000000000000000000000000000000) {
    xx >>= 128;
    r <<= 64;
  }
  if (xx >= 0x10000000000000000) {
    xx >>= 64;
    r <<= 32;
  }
  if (xx >= 0x100000000) {
    xx >>= 32;
    r <<= 16;
  }
  if (xx >= 0x10000) {
    xx >>= 16;
    r <<= 8;
  }
  if (xx >= 0x100) {
    xx >>= 8;
    r <<= 4;
  }
  if (xx >= 0x10) {
    xx >>= 4;
    r <<= 2;
  }
  if (xx >= 0x8) {
    r <<= 1;
  }
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;
  r = (r + x / r) >> 1;

  int r1 = x / r;

  return (r < r1 ? r : r1);
}


int math::div(int a, int b, int factor) {
    return muldiv(a, factor, b);
}

int math::mul(int a, int b, int factor) {
    return muldiv(a, b, factor);
}

int math::get_percent(int a, int percent, int factor) {
    return math::div(math::mul(a, percent, factor), factor, factor);
}

int math::minus_percent(int a, int percent, int factor) {
    return a - math::get_percent(a, percent, factor);
}

int math::plus_percent(int a, int percent, int factor) {
    return a + math::get_percent(a, percent, factor);
}

int math::get_linear_price() method_id {
    init_data();
    return math::div(self::ton_balance, self::jetton_balance, self::factor);
}


{-
  first add liquidity
  add 1000 ton and 2000 jetton
  new_liquidty = sqrt(1000 * 2000) / 1000

  new liq = 1,41421...

  second add liquidity
  add 500 ton and 1000 jetton
  ton share = 0,707105
  jetton share = 0,707105

  new liq = 0,707105
-}
int math::get_lp_value(int a, int b) method_id { 
    init_data();
    int new_liquidity = 0;
    int minimum_liquidity = 1000;
    if (self::jetton_balance == 0) {
        new_liquidity = math::sqrt(a * b) / minimum_liquidity;
    } else {
        int ton_share = (a * self::lp_supply) / self::ton_balance;
        int jetton_share = (b * self::lp_supply) / self::jetton_balance;
        new_liquidity = min(ton_share, jetton_share); 
    }
    return new_liquidity;
}

(
    int, ;; amount out
    int  ;; market price
) math::get_ton_price(int jetton_amount) method_id {
    init_data();
    int ton_reserve = self::ton_balance;
    int jetton_reserve = self::jetton_balance;

    int amount_input = jetton_amount;

    int k = math::mul(ton_reserve, jetton_reserve, self::factor);

    int ton_reserve_after_execution = math::div(k, jetton_reserve + jetton_amount, self::factor);
    int amount_out = ton_reserve - ton_reserve_after_execution;


    int dex_fee = math::get_percent(amount_out, self::dex_commission, self::factor);
    int lp_fee = math::get_percent(amount_out, self::lp_commission, self::factor);
    amount_out -= (dex_fee + lp_fee);

    int market_price = math::div(amount_input, amount_out, self::factor);

    return (amount_out, market_price);
}

(
    int, ;; amount out
    int  ;; market price
) math::get_jetton_price(int ton_amount) method_id {
    init_data();
    int ton_reserve = self::ton_balance;
    int jetton_reserve = self::jetton_balance;

    int amount_input = ton_amount;

    int k = math::mul(ton_reserve, jetton_reserve, self::factor);

    int jetton_reserve_after_execution = math::div(k, ton_reserve + amount_input, self::factor);
    int amount_out = jetton_reserve - jetton_reserve_after_execution;


    int dex_fee = math::get_percent(amount_out, self::dex_commission, self::factor);
    int lp_fee = math::get_percent(amount_out, self::lp_commission, self::factor);
    amount_out -= (dex_fee + lp_fee);

    int market_price = math::div(amount_input, amount_out, self::factor);

    return (amount_out, market_price);
}



;; linear price - 0.25
;; ton amount - 100
;; jetton amount - 400
;; ton need - 100
;; ton excessed - 0
(int, int, int, int) math::get_need_amount(int ton_amount, int jetton_amount) method_id {
    init_data();
    int linear_price = math::get_linear_price();
    int ton_need = math::mul(jetton_amount, linear_price, self::factor);
    int ton_excesses = ton_amount - ton_need;
    if (ton_excesses < 0) {
        return (0, 0, 0, true);
    }
    return (ton_need, jetton_amount, ton_excesses, false);
}